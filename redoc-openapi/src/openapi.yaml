openapi: 3.0.3
info:
  version: 1.0.0
  title: Example.com
  termsOfService: "https://example.com/terms/"
  contact:
    email: contact@example.com
    url: "http://example.com/contact"
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
  x-logo:
    url: "https://apis.guru/openapi-template/logo.png"
  description: >
    # Your description here
externalDocs:
  description: Find out how to create a GitHub repo for your OpenAPI definition.
  url: "https://github.com/Rebilly/generator-openapi-repo"
tags:
  - name: Echo
    description: Example echo operations
  - name: User
    description: Operations about user
servers:
  - url: "http://example.com/api/v1"
  - url: "https://example.com/api/v1"
paths:
  # paths here
  "/users/{username}":
    $ref: "paths/users@{username}.yaml"
  /echo:
    $ref: paths/echo.yaml
components:
  securitySchemes:
    # security schemes here
security:
  - SecretAPIKey: []
  - JWT: []
parameters:
  - name: pretty_print
    in: query
    description: Pretty print response
    schema:
      type: boolean
get:
  tags:
    - User
  summary: Get user by user name
  description: |
    Some description of the operation.
    You can use `markdown` here.
  operationId: getUserByName
  parameters:
    - name: username
      in: path
      description: The name that needs to be fetched
      required: true
      schema:
        type: string
    - name: with_email
      in: query
      description: Filter users without email
      schema:
        type: boolean
  security:
    - main_auth:
        - "read:users"
    - api_key: []
  responses:
    "200":
      description: Success
      content:
        application/json:
          schema:
            $ref: ../components/schemas/User.yaml
          example:
            username: user1
            email: user@example.com
    "403":
      description: Forbidden
    "404":
      description: User not found
put:
  tags:
    - User
  summary: Updated user
  description: This can only be done by the logged in user.
  operationId: updateUser
  parameters:
    - name: username
      in: path
      description: The name that needs to be updated
      required: true
      schema:
        type: string
  security:
    - main_auth:
        - "write:users"
  responses:
    "200":
      description: OK
    "400":
      description: Invalid user supplied
    "404":
      description: User not found
  requestBody:
    content:
      application/json:
        schema:
          $ref: ../components/schemas/User.yaml
      application/xml:
        schema:
          $ref: ../components/schemas/User.yaml
    description: Updated user object
    required: true
